# -*- coding: utf-8 -*-
"""ML-task02

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15f9hJyFFSrm-8nsR0njzng2zB_7QGRmB
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')
from sklearn.preprocessing import StandardScaler

def set_size_style(width, height, style=None):
    plt.figure(figsize=(width, height))
    if style != None:
        sns.set_style(style)

def customize_plot(plot, title:str, xlabel:str,  ylabel:str, title_font:int, label_font:int):
    plot.set_title(title, fontsize = title_font, weight='bold')
    plot.set_xlabel(xlabel, fontsize = label_font, weight='bold')
    plot.set_ylabel(ylabel, fontsize = label_font, weight='bold')

customer_df = pd.read_csv("/content/Mall_Customers.csv")
customer_df.head()

customer_df.shape

customer_df.describe()

customer_df.drop(columns=['CustomerID'], inplace=True)

customer_df.isna().sum()

for col in customer_df.describe().columns:
    plt.figure(figsize=(8,2))
    sns.boxplot(data=customer_df, x=col)
    plt.show()

#Exploratory Data Analysis(EDA)
gender_count = customer_df['Gender'].value_counts()
plt.title("Gender Distribution", fontsize = 12, weight='bold')
plt.pie(gender_count,labels=gender_count.index,radius=1, autopct='%.2f%%')
plt.show()

for col in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:
    plt.figure()
    set_size_style(7,2)
    sns.histplot(customer_df[col],bins = 25, kde=True)

set_size_style(8,3)
ax = sns.scatterplot(data = customer_df, x = 'Annual Income (k$)', y = 'Spending Score (1-100)')
customize_plot(ax,'Correlation Annual Income & Spending Score','Annual Income','Spending Score',13,10)

set_size_style(8,3)
ax = sns.scatterplot(data = customer_df, x = 'Age', y = 'Spending Score (1-100)')
customize_plot(ax,'Correlation b/w Age & Spending Score', 'Age', 'Spending Score',13,10)

#One Hot Encoding
dummies = pd.get_dummies(customer_df['Gender'],dtype=int)
dummies

customer_newdf = pd.concat([customer_df,dummies], axis = 'columns')
customer_newdf

customer_newdf.drop(columns=['Gender'], inplace=True)

#Scaling Data
scaler = StandardScaler()
scaler.fit(customer_newdf)

scaled_data = scaler.transform(customer_newdf)
customer_scaled = pd.DataFrame(data = scaled_data, columns = customer_newdf.columns)
customer_scaled

#Principal Component Analysis
pca = PCA()
pca.fit(customer_scaled)

pca.explained_variance_ratio_

features = range(pca.n_components_)
plt.bar(features, pca.explained_variance_ratio_)
plt.xticks(features)
plt.ylabel('Variance Ratio')
plt.xlabel('PCA feature')
plt.show()

pca = PCA(n_components = 3)
customer_pca = pca.fit_transform(customer_scaled)
customer_pca

#Clustering with K-Means
inertia = []
for cluster in range(1, 10):
    kmeans = KMeans(n_clusters=cluster, random_state=42)
    kmeans.fit(customer_pca)
    inertia.append(kmeans.inertia_)
plt.plot(range(1, 10), inertia, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method')
plt.show()

kmeans = KMeans(n_clusters=4, random_state=42)
cluster_labels = kmeans.fit_predict(customer_pca)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot each cluster
for cluster in range(4):
    cluster_points = customer_pca[cluster_labels == cluster]
    ax.scatter(cluster_points[:, 0], cluster_points[:, 1], cluster_points[:, 2], label=f'Cluster {cluster + 1}')

ax.set_xlabel('PCA Feature 1')
ax.set_ylabel('PCA Feature 2')
ax.set_zlabel('PCA Feature 3')
ax.set_title('Clusters in 3D')

plt.legend()
plt.show()

customer_df['label'] = kmeans.labels_
customer_df

customer_df.groupby('label').agg({'Age': 'mean',
                                     'Annual Income (k$)': 'mean',
                                     'Spending Score (1-100)': 'mean'})